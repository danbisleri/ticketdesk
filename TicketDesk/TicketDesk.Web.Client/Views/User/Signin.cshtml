@using TicketDesk.Localization.Views.User
@model TicketDesk.Web.Client.Models.UserSignInViewModel
@section title
{
    @SignIn.Title
}
@section Scripts {
}

@{
    Layout = null;
}
@*<main>*@
<html>
<head>
    <meta charset="utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="msapplication-config" content="none" />
    <style type="text/css">
    </style>
    @Styles.Render("~/content/styles")
    @Scripts.Render("~/bundles/modernizr")
    @{
        var insightsKey = System.Configuration.ConfigurationManager.AppSettings["ticketdesk:InsightsInstrumentationKey"];
        if (!string.IsNullOrEmpty(insightsKey))
        {
            <script type="text/javascript">
                var appInsights = window.appInsights || function (config) {
                    function s(config) { t[config] = function () { var i = arguments; t.queue.push(function () { t[config].apply(t, i) }) } } var t = { config: config }, r = document, f = window, e = "script", o = r.createElement(e), i, u; for (o.src = config.url || "//az416426.vo.msecnd.net/scripts/a/ai.0.js", r.getElementsByTagName(e)[0].parentNode.appendChild(o), t.cookie = r.cookie, t.queue = [], i = ["Event", "Exception", "Metric", "PageView", "Trace"]; i.length;) s("track" + i.pop()); return config.disableExceptionTracking || (i = "onerror", s("_" + i), u = f[i], f[i] = function (config, r, f, e, o) { var s = u && u(config, r, f, e, o); return s !== !0 && t["_" + i](config, r, f, e, o), s }), t
                }({
                    instrumentationKey: "@insightsKey"
                });

                window.appInsights = appInsights;
                appInsights.trackPageView();
            </script>
        }
    }
    <style>
        .center {
            width: 100%;
            transform: translate(-50%, -50%);
            position: absolute;
            top: 50%;
            left: 50%;
            padding: 20px;
            resize: both;
        }
    </style>
</head>
<body>
    
        <div class="container center">
            <fieldset>
                @*<legend class="col-lg-8 col-lg-offset-2 col-md-9 col-md-offset-1 col-sm-12">@SignIn.Legend</legend>*@
                <div class="col-lg-7 col-lg-offset-3 col-md-8 col-md-offset-2 col-sm-12">
                    @using (Html.BeginForm("SignIn", "User", new { ReturnUrl = ViewBag.ReturnUrl }, FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
                    {
                        @Html.AntiForgeryToken()

                        <div class="panel panel-info">
                            <div class="panel-heading">
                                <h2 class="panel-title">@SignIn.Header</h2>
                            </div>
                            <div class="panel-body">
                                @if (ViewBag.IsDemoMode ?? false)
                                {

                                    <div class="alert alert-warning">
                                        <p>Demo Mode defualt user credentials:</p>
                                        <ul>
                                            <li>Administrator account: admin@example.com (123456)</li>
                                            <li>Helpdesk user account: staff@example.com (123456)</li>
                                            <li>Standard user account: user@example.com (123456)</li>
                                        </ul>
                                    </div>
                                }
                                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                                <div class="form-group">
                                    @Html.LabelFor(m => m.UserNameOrEmail, new { @class = "col-md-3 control-label" })
                                    <div class="col-md-8">
                                        @Html.TextBoxFor(m => m.UserNameOrEmail, new { @class = "form-control" })
                                        @Html.ValidationMessageFor(m => m.UserNameOrEmail, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="form-group">
                                    @Html.LabelFor(m => m.Password, new { @class = "col-md-3 control-label" })
                                    <div class="col-md-8">
                                        @Html.PasswordFor(m => m.Password, new { @class = "form-control" })
                                        @Html.ValidationMessageFor(m => m.Password, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="form-group">
                                    <div class="col-sm-offset-2 col-sm-9">
                                        <label class="checkbox-inline">
                                            @Html.EditorFor(m => m.RememberMe)
                                            @Html.DisplayNameFor(m => m.RememberMe)
                                        </label>
                                    </div>
                                </div>
                            </div>
                            <div class="panel-footer">
                                <button type="submit" class="btn btn-success" tabindex="10">@SignIn.SaveOption</button>
                                @if (ApplicationConfig.RegisterEnabled)
                                {
                                    <span>&nbsp; &nbsp;</span>
                                    @Html.ActionLink(SignIn.BackOption, "Register")
                                }
                            </div>
                        </div>
                    }
                </div>
            </fieldset>
        </div>
    
    @*</main>*@

</body>
</html>
